# -*- coding: utf-8 -*-
"""Final_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15g_0qw-M6rzucr-DtwexfgU1e-HDrtrv
"""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming your dataset is stored in a DataFrame named 'df'
# Replace 'your_dataset.csv' with your actual file path and adjust column names
df = pd.read_csv('train.csv')

# Create a crosstab to count the frequency of satisfaction levels for each gender
cross_tab = pd.crosstab(df['Gender'], df['satisfaction'])

# Plot the stacked bar chart
colors = ['blue', 'skyblue']  # Green for satisfied, red for dissatisfied
cross_tab.plot(kind='bar', stacked=True, color=colors, figsize=(10, 6))

# Set labels and title
plt.xlabel('Gender')
plt.ylabel('Frequency')
plt.title('Stacked Bar Chart of Satisfaction Levels by Gender')

# Display the legend
plt.legend(title='Satisfaction', labels=['Satisfied', 'Dissatisfied'])

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming your dataset is stored in a DataFrame named 'df'
# Replace 'your_dataset.csv' with your actual file path and adjust column names
df = pd.read_csv('train.csv')

# Create a box plot to visualize the correlation between 'Age' and 'Customer Type'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Customer Type', y='Age', data=df)

# Set labels and title
plt.xlabel('Customer Type')
plt.ylabel('Age')
plt.title('Correlation between Age and Customer Type')

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming your dataset is stored in a DataFrame named 'df'
# Replace 'your_dataset.csv' with your actual file path and adjust column names
df = pd.read_csv('train.csv')

# Create a count plot to visualize the distribution
plt.figure(figsize=(10, 6))
sns.countplot(x='Type of Travel', hue='Class', data=df)

# Set labels and title
plt.xlabel('Type of Travel')
plt.ylabel('Count')
plt.title('Correlation between Type of Travel and Class')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming your dataset is stored in a DataFrame named 'df'
# Replace 'your_dataset.csv' with your actual file path and adjust column names
df = pd.read_csv('train.csv')

# List of columns to visualize
columns_to_visualize = [
    'Inflight wifi service', 'Departure/Arrival time convenient', 'Ease of Online booking',
    'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort', 'Inflight entertainment',
    'On-board service', 'Leg room service', 'Baggage handling', 'Checkin service',
    'Inflight service', 'Cleanliness', 'Departure Delay in Minutes', 'Arrival Delay in Minutes'
]

# Create a subset of the DataFrame for Business travelers
business_travel_df = df[df['Type of Travel'] == 'Business travel']

# Create a subset of the DataFrame for Leisure travelers
leisure_travel_df = df[df['Type of Travel'] == 'Personal Travel']

# Create a grouped bar plot for both Business and Leisure travelers
plt.figure(figsize=(16, 8))
sns.set_theme(style="whitegrid")  # Optional: Set a seaborn theme

bar_width = 0.35
bar_positions_business = range(len(columns_to_visualize))
bar_positions_leisure = [pos + bar_width for pos in bar_positions_business]

# Plot bars for Business travelers
for i, column in enumerate(columns_to_visualize):
    sns.barplot(x=bar_positions_business[i], y=column, data=business_travel_df, label=f'Business - {column}', color='blue', alpha=0.7)

# Plot bars for Leisure travelers
for i, column in enumerate(columns_to_visualize):
    sns.barplot(x=bar_positions_leisure[i], y=column, data=leisure_travel_df, label=f'Leisure - {column}', color='orange', alpha=0.7)

# Set labels and title
plt.xlabel('Service')
plt.ylabel('Rating')
plt.title('Ratings for Services by Business and Leisure Travelers')

# Set x-axis ticks and labels
plt.xticks([pos + bar_width / 2 for pos in bar_positions_business], columns_to_visualize, rotation=45, ha='right')

# Display the legend
plt.legend(title='Type of Travel', bbox_to_anchor=(1.05, 1), loc='upper left')

# Show the plot
plt.tight_layout()
plt.show()

pip install plotly

import pandas as pd
import plotly.graph_objects as go

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Assuming 'Airline Name' is the column with airline names and 'Overall_Rating' is the column with ratings
# Replace 'Airline_review.csv' with your actual file path and adjust column names
# Convert 'Overall_Rating' to numeric, handling errors by setting them as NaN
df['Overall_Rating'] = pd.to_numeric(df['Overall_Rating'], errors='coerce')

# Drop rows with NaN values in 'Overall_Rating'
df = df.dropna(subset=['Overall_Rating'])

# Calculate average ratings for each airline
average_ratings = df.groupby('Airline Name')['Overall_Rating'].mean()

# Get the top 5 positively reviewed airlines
top_airlines = average_ratings.sort_values(ascending=False).head(5)

# Create gauge charts for the top 5 positively reviewed airlines
for airline, rating in top_airlines.items():
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=rating,
        title=f"{airline} Average Rating",
        domain={'x': [0, 1], 'y': [0, 1]},
        gauge={
            'axis': {'range': [0, 10]},
            'bar': {'color': 'green'},
            'steps': [
                {'range': [0, 5], 'color': 'red'},
                {'range': [5, 7], 'color': 'yellow'},
                {'range': [7, 10], 'color': 'green'}
            ],
        }
    ))
    fig.show()

import pandas as pd

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Assuming 'Airline Name' is the column with airline names and 'Overall_Rating' is the column with ratings
# Replace 'Airline_review.csv' with your actual file path and adjust column names
# Convert 'Overall_Rating' to numeric, handling errors by setting them as NaN
df['Overall_Rating'] = pd.to_numeric(df['Overall_Rating'], errors='coerce')

# Drop rows with NaN values in 'Overall_Rating'
df = df.dropna(subset=['Overall_Rating'])

# Calculate the average score for each airline
average_scores = df.groupby('Airline Name')['Overall_Rating'].mean()

# Get the most reviewed airlines
most_reviewed_airlines = df['Airline Name'].value_counts().head(5).index

# Calculate the average score for the most reviewed airlines
average_scores_most_reviewed = average_scores.loc[most_reviewed_airlines]

# Display the average scores
print("Average Scores for the Most Reviewed Airlines:")
print(average_scores_most_reviewed)

import pandas as pd
import plotly.graph_objects as go

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Assuming 'Airline Name' is the column with airline names and 'Overall_Rating' is the column with ratings
# Replace 'Airline_review.csv' with your actual file path and adjust column names
# Convert 'Overall_Rating' to numeric, handling errors by setting them as NaN
df['Overall_Rating'] = pd.to_numeric(df['Overall_Rating'], errors='coerce')

# Drop rows with NaN values in 'Overall_Rating'
df = df.dropna(subset=['Overall_Rating'])

# Filter the data for travelers who identify as "Business"
business_travelers_df = df[df['Type Of Traveller'] == 'Business']

# Get the most reviewed airlines among business travelers
most_reviewed_airlines_business = business_travelers_df['Airline Name'].value_counts().head(5).index

# Calculate the average score for the most reviewed airlines among business travelers
average_scores_business = business_travelers_df.groupby('Airline Name')['Overall_Rating'].mean()
average_scores_most_reviewed_business = average_scores_business.loc[most_reviewed_airlines_business]

# Create gauge charts for each airline
for airline, average_score in average_scores_most_reviewed_business.items():
    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode="gauge+number",
        value=average_score,
        domain={'x': [0, 1], 'y': [0, 1]},
        gauge=dict(
            axis=dict(range=[0, 10]),
            bar=dict(color="green"),
            steps=[
                {'range': [0, 6], 'color': "red"},
                {'range': [6, 10], 'color': "green"}
            ]
        )
    ))

    fig.update_layout(
        title=f"{airline} (Business Travelers)",
        height=300,
        width=300
    )

    fig.show()

import pandas as pd
import plotly.graph_objects as go

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Assuming 'Airline Name' is the column with airline names and 'Overall_Rating' is the column with ratings
# Replace 'Airline_review.csv' with your actual file path and adjust column names
# Convert 'Overall_Rating' to numeric, handling errors by setting them as NaN
df['Overall_Rating'] = pd.to_numeric(df['Overall_Rating'], errors='coerce')

# Drop rows with NaN values in 'Overall_Rating'
df = df.dropna(subset=['Overall_Rating'])

# Filter the data for travelers who identify as "Business"
business_travelers_df = df[df['Type Of Traveller'] == 'Business']

# Get the most reviewed airlines among business travelers
most_reviewed_airlines_business = business_travelers_df['Airline Name'].value_counts().head(5).index

# Calculate the average score for the most reviewed airlines among business travelers
average_scores_business = business_travelers_df.groupby('Airline Name')['Overall_Rating'].mean()
average_scores_most_reviewed_business = average_scores_business.loc[most_reviewed_airlines_business]

# Create gauge charts for each airline
for airline, average_score in average_scores_most_reviewed_business.items():
    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode="gauge+number",
        value=average_score,
        domain={'x': [0, 1], 'y': [0, 1]},
        gauge=dict(
            axis=dict(range=[0, 10]),
            bar=dict(color="green"),
            steps=[
                {'range': [0, 10], 'color': 'white'}
            ]
        )
    ))

    fig.update_layout(
        title=f"{airline}",
        height=300,
        width=300
    )

    fig.show()

import pandas as pd
import plotly.graph_objects as go

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Assuming 'Airline Name' is the column with airline names and 'Overall_Rating' is the column with ratings
# Replace 'Airline_review.csv' with your actual file path and adjust column names
# Convert 'Overall_Rating' to numeric, handling errors by setting them as NaN
df['Overall_Rating'] = pd.to_numeric(df['Overall_Rating'], errors='coerce')

# Drop rows with NaN values in 'Overall_Rating'
df = df.dropna(subset=['Overall_Rating'])

# Filter the data for travelers who identify as "Business"
business_travelers_df = df[df['Type Of Traveller'] == 'Business']

# Get the most reviewed airlines among business travelers
most_reviewed_airlines_business = business_travelers_df['Airline Name'].value_counts().head(5).index

# Calculate the average score for the most reviewed airlines among business travelers
average_scores_business = business_travelers_df.groupby('Airline Name')['Overall_Rating'].mean()
average_scores_most_reviewed_business = average_scores_business.loc[most_reviewed_airlines_business]

# Create gauge charts for each airline
for airline, average_score in average_scores_most_reviewed_business.items():
    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode="gauge+number",
        value=average_score,
        domain={'x': [0, 1], 'y': [0, 1]},
        gauge=dict(
            axis=dict(range=[0, 10]),
            bar=dict(color="green"),
            steps=[
                {'range': [0, 10], 'color': 'white'}
            ]
        )
    ))

    # Center the airline name above the chart
    fig.add_annotation(
        text=airline,
        x=0.5,
        y=1.2,
        showarrow=False,
        xref="paper",
        yref="paper",
        xanchor="center",
        yanchor="bottom"
    )

    fig.update_layout(
        height=300,
        width=300
    )

    fig.show()

import pandas as pd
import plotly.graph_objects as go

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Assuming 'Airline Name' is the column with airline names and 'Overall_Rating' is the column with ratings
# Replace 'Airline_review.csv' with your actual file path and adjust column names
# Convert 'Overall_Rating' to numeric, handling errors by setting them as NaN
df['Overall_Rating'] = pd.to_numeric(df['Overall_Rating'], errors='coerce')

# Drop rows with NaN values in 'Overall_Rating'
df = df.dropna(subset=['Overall_Rating'])

# Filter the data for travelers who do not identify as "Business"
non_business_travelers_df = df[df['Type Of Traveller'] != 'Business']

# Get the most reviewed airlines among non-business travelers
most_reviewed_airlines_non_business = non_business_travelers_df['Airline Name'].value_counts().head(5).index

# Calculate the average score for the most reviewed airlines among non-business travelers
average_scores_non_business = non_business_travelers_df.groupby('Airline Name')['Overall_Rating'].mean()
average_scores_most_reviewed_non_business = average_scores_non_business.loc[most_reviewed_airlines_non_business]

# Create gauge charts for each airline
for airline, average_score in average_scores_most_reviewed_non_business.items():
    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode="gauge+number",
        value=average_score,
        domain={'x': [0, 1], 'y': [0, 1]},
        gauge=dict(
            axis=dict(range=[0, 10]),
            bar=dict(color="green"),
            steps=[
                {'range': [0, 10], 'color': 'white'}
            ]
        )
    ))

    # Center the airline name above the chart
    fig.add_annotation(
        text=airline,
        x=0.5,
        y=1.2,
        showarrow=False,
        xref="paper",
        yref="paper",
        xanchor="center",
        yanchor="bottom"
    )

    fig.update_layout(
        height=300,
        width=300
    )

    fig.show()

import pandas as pd
import plotly.graph_objects as go

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Assuming 'Airline Name' is the column with airline names and 'Overall_Rating' is the column with ratings
# Replace 'Airline_review.csv' with your actual file path and adjust column names
# Convert 'Overall_Rating' to numeric, handling errors by setting them as NaN
df['Overall_Rating'] = pd.to_numeric(df['Overall_Rating'], errors='coerce')

# Drop rows with NaN values in 'Overall_Rating'
df = df.dropna(subset=['Overall_Rating'])

# Filter the data for travelers who do not identify as "Business"
non_business_travelers_df = df[df['Type Of Traveller'] != 'Business']

# Filter the data for the airline "United Airlines"
united_airlines_df = non_business_travelers_df[non_business_travelers_df['Airline Name'] == 'United Airlines']

# Calculate the average score for "United Airlines" among non-business travelers
average_score_united_airlines = united_airlines_df['Overall_Rating'].mean()

# Create a gauge chart for "United Airlines"
fig = go.Figure()

fig.add_trace(go.Indicator(
    mode="gauge+number",
    value=average_score_united_airlines,
    domain={'x': [0, 1], 'y': [0, 1]},
    gauge=dict(
        axis=dict(range=[0, 10]),
        bar=dict(color="green"),
        steps=[
            {'range': [0, 10], 'color': 'white'}
        ]
    )
))

# Center the airline name above the chart
fig.add_annotation(
    text="United Airlines",
    x=0.5,
    y=1.2,
    showarrow=False,
    xref="paper",
    yref="paper",
    xanchor="center",
    yanchor="bottom"
)

fig.update_layout(
    title=f"Average Rating",
    height=300,
    width=300
)

fig.show()

!pip install wordcloud
!pip install nltk
import nltk
nltk.download('stopwords')

import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
import string

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Filter the data for reviews related to "United Airlines"
united_airlines_reviews = df[df['Airline Name'] == 'United Airlines']['Review']

# Concatenate all the reviews into a single string
all_reviews_text = ' '.join(united_airlines_reviews)

# Remove non-letter characters
all_reviews_text = ''.join(char for char in all_reviews_text if char.isalpha() or char.isspace())

# Tokenize the text (split it into words)
words = all_reviews_text.split()

# Remove stop words
stop_words = set(stopwords.words('english'))
filtered_words = [word for word in words if word.lower() not in stop_words]

# Join the filtered words back into a single string
filtered_text = ' '.join(filtered_words)

# Generate the word cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(filtered_text)

# Plot the word cloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud for United Airlines Reviews')
plt.show()

import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame and 'Review' is the column containing reviews
# Assuming 'Overall_Rating' contains integer values from 0 to 10

# Function to categorize sentiment based on Overall_Rating
def categorize_sentiment(rating):
    return 'Negative' if rating <= 4 else 'Positive'

# Create a new 'Sentiment' column
df['Sentiment'] = df['Overall_Rating'].apply(categorize_sentiment)

# Filter reviews based on sentiment
positive_reviews = df[df['Sentiment'] == 'Positive']['Review']
negative_reviews = df[df['Sentiment'] == 'Negative']['Review']

# Function to generate word cloud
def generate_wordcloud(reviews, title):
    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(reviews))
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.title(title)
    plt.show()

# Generate word clouds for positive and negative reviews
generate_wordcloud(positive_reviews, 'Positive Reviews Word Cloud')
generate_wordcloud(negative_reviews, 'Negative Reviews Word Cloud')

import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Convert 'Overall_Rating' column to numeric (assuming it contains convertible values)
df['Overall_Rating'] = pd.to_numeric(df['Overall_Rating'], errors='coerce')

# Filter rows for the airline "Delta Air Lines"
delta_reviews = df[df['Airline Name'] == 'Air China']['Review']

# Function to categorize sentiment based on Overall_Rating
def categorize_sentiment(rating):
    return 'Negative' if rating <= 4 else 'Positive'

# Create a new 'Sentiment' column
df['Sentiment'] = df['Overall_Rating'].apply(categorize_sentiment)

# Filter reviews based on sentiment for the airline "Delta Air Lines"
positive_reviews_delta = df[(df['Airline Name'] == 'Air China') & (df['Sentiment'] == 'Positive')]['Review']
negative_reviews_delta = df[(df['Airline Name'] == 'Air China') & (df['Sentiment'] == 'Negative')]['Review']

# Function to generate word cloud
def generate_wordcloud(reviews, title):
    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(reviews))
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.title(title)
    plt.show()

# Generate word clouds for positive and negative reviews of "Delta Air Lines"
generate_wordcloud(positive_reviews_delta, 'Positive Reviews Word Cloud for Air China')
generate_wordcloud(negative_reviews_delta, 'Negative Reviews Word Cloud for Air China')

import pandas as pd
import plotly.graph_objects as go

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Filter rows for the airline "Air France"
air_france_df = df[df['Airline Name'] == 'Air France']

# Calculate the average rating
average_rating = air_france_df['Overall_Rating'].mean()

# Create a gauge chart
fig = go.Figure()

fig.add_trace(go.Indicator(
    mode="gauge+number",
    value=average_rating,
    domain={'x': [0, 1], 'y': [0, 1]},
    title={'text': "Average Rating for Air France"},
    gauge={
        'axis': {'range': [0, 10]},
        'bar': {'color': "green"},
        'steps': [
            {'range': [0, 10], 'color': "lightgray"}
        ],
    }
))

# Show the gauge chart
fig.show()

import pandas as pd
import plotly.graph_objects as go

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Filter rows for the airline "Air France"
air_france_df = df[df['Airline Name'] == 'Ryanair']

# Columns to consider for star chart
columns_for_star_chart = ['Seat Comfort', 'Cabin Staff Service', 'Food & Beverages', 'Inflight Entertainment', 'Value For Money', 'Recommended']

# Calculate the average ratings for each column
average_ratings = air_france_df[columns_for_star_chart].mean()

# Create a star chart
fig = go.Figure()

fig.add_trace(go.Scatterpolar(
    r=average_ratings.values,
    theta=columns_for_star_chart,
    fill='toself',
    name='Average Ratings for Ryanair',
    line_color='green'
))

fig.update_layout(
    polar=dict(
        radialaxis=dict(
            visible=True,
            range=[0, 5]  # Adjust the range based on your rating scale
        )
    ),
    showlegend=True
)

# Show the star chart
fig.show()

import pandas as pd
import plotly.graph_objects as go

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Filter rows for the airline "Air France"
air_france_df = df[df['Airline Name'] == 'Air France']

# Columns to consider for star chart
columns_for_star_chart = ['Seat Comfort', 'Cabin Staff Service', 'Food & Beverages', 'Inflight Entertainment', 'Value For Money', 'Recommended']

# Calculate the average ratings for each column
average_ratings = air_france_df[columns_for_star_chart].mean()

# Define the star rating scale (adjust based on your rating scale)
star_scale = 5  # Assuming a 5-star scale

# Create a star chart with a rating scale
fig = go.Figure()

fig.add_trace(go.Scatterpolar(
    r=[rating / star_scale for rating in average_ratings.values],
    theta=columns_for_star_chart,
    fill='toself',
    name='Average Ratings for Air France',
    line_color='green'
))

fig.update_layout(
    polar=dict(
        radialaxis=dict(
            visible=True,
            range=[0, 1]  # Adjust the range based on your normalized rating scale
        )
    ),
    showlegend=True
)

# Show the star chart
fig.show()

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Filter rows for the airline "Air France"
air_france_df = df[df['Airline Name'] == 'Air France']

# Columns to consider for star chart
columns_for_star_chart = ['Seat Comfort', 'Cabin Staff Service', 'Food & Beverages', 'Inflight Entertainment', 'Value For Money', 'Recommended']

# Calculate the average ratings for each column
average_ratings = air_france_df[columns_for_star_chart].mean()

# Create a star chart with five yellow stars
fig, ax = plt.subplots(figsize=(8, 4))

for i, (category, rating) in enumerate(average_ratings.items()):
    ax.add_patch(Rectangle((i, 0), 1, 1, color='gold', ec='black'))
    ax.text(i + 0.5, 0.5, f'{rating:.2f}', ha='center', va='center', fontsize=12)

# Set axis properties
ax.set_xlim(-0.5, len(average_ratings) - 0.5)
ax.set_ylim(0, 1)
ax.axis('off')

# Set title
plt.title('Average Ratings for Air France')

# Show the star chart
plt.show()

import pandas as pd
import plotly.express as px

# Load your dataset (replace 'Airline_review.csv' with your actual file path)
df = pd.read_csv('Airline_review.csv')

# Filter rows for the airline "Air France"
air_france_df = df[df['Airline Name'] == 'Air France']

# Columns to consider for star chart
columns_for_star_chart = ['Seat Comfort', 'Cabin Staff Service', 'Food & Beverages', 'Inflight Entertainment', 'Value For Money', 'Recommended']

# Calculate the average ratings for each column
average_ratings = air_france_df[columns_for_star_chart].mean()

# Create a DataFrame for plotting
star_chart_data = pd.DataFrame({
    'Category': columns_for_star_chart,
    'Average Rating': average_ratings
})

# Normalize ratings to be in the range [0, 1]
star_chart_data['Normalized Rating'] = star_chart_data['Average Rating'] / star_chart_data['Average Rating'].max()

# Create a bar chart with custom colors
fig = px.bar(
    star_chart_data,
    x='Category',
    y='Normalized Rating',
    text='Average Rating',
    color='Normalized Rating',
    color_continuous_scale='YlGn',
    title='Average Ratings for Air France',
    labels={'Normalized Rating': 'Average Rating'},
)

# Customize the layout
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(showlegend=False, yaxis_range=[0, 1], coloraxis_showscale=False)

# Show the star chart
fig.show()