# -*- coding: utf-8 -*-
"""TimeTerrorism.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SlIHw0MtkJSRjaOlltM96JNqZtmUH734
"""

!pip install researchpy

import statistics as st # Built in Python library for descriptive statistics
import pandas as pd  # Data manipulation and analysis library
import researchpy as rp  # Open source library focused on univariate and bivariate analysis
import numpy as np  # General purpose array processing package
import seaborn as sns  # Data visualization library based on matplotlib
import matplotlib.pyplot as plt  # Data visualization library
import scipy.stats as spy  # Statistical library from Scipy
import statistics as st # Built in Python library for descriptive statistics
import pandas as pd  # Data manipulation and analysis library
import researchpy as rp  # Open source library focused on univariate and bivariate analysis
import numpy as np  # General purpose array processing package
import seaborn as sns  # Data visualization library based on matplotlib
import matplotlib.pyplot as plt  # Data visualization library
import scipy.stats as spy  # Statistical library from Scipy
from scipy.stats import norm, kurtosis, laplace, semicircular
from scipy import stats
from scipy.stats import gmean, hmean, trim_mean

# Loading dataset1
# https://archive.ics.uci.edu/ml/datasets/Mammographic+Mass
# Missing Values? Yes
df = pd.read_csv('terrorism1.csv')
df.shape

# Group data by 'year' and count the number of attacks for each year
attack_counts = df['iyear'].value_counts().sort_index()
years = attack_counts.index
counts = attack_counts.values

# Create a line graph
plt.figure(figsize=(12, 6))
plt.plot(years, counts, marker='o', linestyle='-')

# Set the x-axis to display every two years
plt.xticks(range(min(years), max(years) + 1, 2), rotation=45)

plt.title('Terrorist Attacks Globally 1970 to 2017')
plt.xlabel('Year')
plt.ylabel('Number of Attacks')
plt.grid(True)
plt.show()

country_counts = df['country_txt'].value_counts()
# Define the data for the pie chart
labels = country_counts.index
sizes = country_counts.values

# Create a pie chart
plt.figure(figsize=(10, 10))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.title('Frequency of Terrorist Attacks by Country')
plt.show()

# Calculate the total number of attacks
total_attacks = country_counts.sum()

# Define the threshold for countries to be categorized as "Other" (1%)
threshold = 0.01

# Identify countries with a frequency of less than the threshold
other_mask = country_counts / total_attacks < threshold

# Sum the attacks for countries that meet the threshold and add them to the "Other" category
other_count = country_counts[other_mask].sum()
country_counts = country_counts[~other_mask]  # Remove countries below the threshold


# Create a pie chart
labels = country_counts.index
sizes = country_counts.values

plt.figure(figsize=(10, 10))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
plt.axis('equal')

plt.title('Frequency of Terrorist Attacks by Country')
plt.show()

# Filter out any missing or invalid day values
df = df.dropna(subset=['iday'])
df['iday'] = df['iday'].astype(int)

# Group data by day of the month and count the frequency of attacks for each day
day_counts = df['iday'].value_counts().sort_index()

# Create a line chart
plt.figure(figsize=(12, 6))
plt.plot(day_counts.index, day_counts.values, marker='o', linestyle='-')
plt.title('Frequency of Terrorist Attacks by Day of the Month')
plt.xlabel('Day of the Month')
plt.ylabel('Number of Attacks')
plt.xticks(range(1, 33))  # Ensure that all days are displayed on the x-axis
plt.grid(True)
plt.show()

# Filter the data for attacks in Iran
iran_data = df[df['country_txt'] == 'Pakistan']

# Group data by year and count the frequency of attacks for each year
yearly_counts = iran_data['iyear'].value_counts().sort_index()

# Create a line chart
plt.figure(figsize=(12, 6))
plt.plot(yearly_counts.index, yearly_counts.values, marker='o', linestyle='-')
plt.title('Terrorist Attacks in Pakistan (All Years)')
plt.xlabel('Year')
plt.ylabel('Number of Attacks')
plt.grid(True)
plt.show()

# Filter the data for attacks carried out only by "Private Citizens & Property"
private_citizens_attacks = df[df['targtype1_txt'] == 'Private Citizens & Property']

# Group the data by country and count the frequency of such attacks
country_counts = private_citizens_attacks['country_txt'].value_counts()

# Filter countries with only "Private Citizens & Property" attacks
only_private_citizens_countries = country_counts[country_counts == 1]

# Create a frequency chart
plt.figure(figsize=(12, 6))
only_private_citizens_countries.plot(kind='bar', color='skyblue')
plt.title('Countries with Attacks Done Only by "Private Citizens & Property"')
plt.xlabel('Country')
plt.ylabel('Number of Attacks')
plt.xticks(rotation=90)
plt.show()

# Replace 'YourCountry' with the name of the country you want to analyze
country_name = 'United States'

# Filter the data for the specific country and attack type
filtered_data = df[(df['country_txt'] == country_name) & (df['targtype1_txt'] == 'Private Citizens & Property')]

# Create a frequency chart
plt.figure(figsize=(12, 6))
filtered_data['iyear'].value_counts().sort_index().plot(kind='bar', color='skyblue')
plt.title(f'Frequency of "Private Citizens & Property" Attacks in {country_name}')
plt.xlabel('Year')
plt.ylabel('Number of Attacks')
plt.xticks(rotation=45)
plt.show()

# Group data by year, region, and count the frequency of attacks for each region
region_counts = df.groupby(['iyear', 'region_txt']).size().unstack(fill_value=0)

# Create an area chart
plt.figure(figsize=(12, 6))
for region in region_counts.columns:
    plt.fill_between(region_counts.index, region_counts[region], label=region)

plt.title('Terrorist Attacks by Region Over Time')
plt.xlabel('Year')
plt.ylabel('Number of Attacks')
plt.legend(loc='upper left', fontsize='x-small')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Group data by year, region, and count the frequency of attacks for each region
region_counts = df.groupby(['iyear', 'region_txt']).size().unstack(fill_value=0)

# Create an area chart with data aggregated every two years
plt.figure(figsize=(12, 6))
for region in region_counts.columns:
    region_data = region_counts[region].groupby((region_counts.index - 1) // 2 * 2).sum()
    plt.fill_between(region_data.index, region_data, label=region)

plt.title('Terrorist Attacks by Region Over Time (Every Two Years)')
plt.xlabel('Year (Aggregated Every Two Years)')
plt.ylabel('Number of Attacks')
plt.legend(loc='upper left', fontsize='x-small')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Filter the data for the "North America" region
north_america_data = df[df['region_txt'] == 'Middle East & North Africa']

# Group data by city and count the frequency of attacks for each city
city_counts = north_america_data['city'].value_counts()

# Sort the cities by attack frequency in descending order
city_counts = city_counts.sort_values(ascending=False)

# Create a frequency chart
plt.figure(figsize=(12, 6))
city_counts.head(20).plot(kind='bar', color='skyblue')
plt.title('Top 20 Cities with the Most Terrorist Attacks in Middle East & North Africa')
plt.xlabel('City')
plt.ylabel('Number of Attacks')
plt.xticks(rotation=45)
plt.show()

# Extract relevant data
years = df['iyear']
attack_types = df['attacktype1_txt']

# Create a scatter plot
plt.figure(figsize=(12, 6))

# Color mapping for different attack types
colors = {
    'Bombing/Explosion': 'red',
    'Armed Assault': 'blue',
    'Assassination': 'green',
    'Hostage Taking (Kidnapping)': 'purple',
    'Facility/Infrastructure Attack': 'orange',
    'Hijacking': 'cyan',
    'Unarmed Assault': 'pink',
    'Hostage Taking (Barricade Incident)': 'yellow',
    'Unknown': 'gray',
}

# Assign colors to each data point based on attack type
scatter_colors = [colors[atype] for atype in attack_types]

# Create the scatter plot
plt.scatter(years, range(len(years)), c=scatter_colors, marker='o', s=10)

# Set labels and title
plt.xlabel('Year')
plt.ylabel('Attack Index')
plt.title('Scatter Plot of Attacks by Year (Color Coded by Attack Type)')

# Create a legend for attack types
legend_handles = [plt.Line2D([0], [0], marker='o', color='w', label=atype,
                             markersize=10, markerfacecolor=color) for atype, color in colors.items()]
plt.legend(handles=legend_handles)

plt.show()

# Filter data for the years 1970 to 1990
df_filtered = df[(df['iyear'] >= 1991) & (df['iyear'] <= 2017)]

# Group data by year and attack type and count the frequency of attacks
attack_counts = df_filtered.groupby(['iyear', 'attacktype1_txt']).size().unstack(fill_value=0)

# Color mapping for different attack types
colors = {
    'Bombing/Explosion': 'red',
    'Armed Assault': 'blue',
    'Assassination': 'green',
    'Hostage Taking (Kidnapping)': 'purple',
    'Facility/Infrastructure Attack': 'orange',
    'Hijacking': 'cyan',
    'Unarmed Assault': 'pink',
    'Hostage Taking (Barricade Incident)': 'yellow',
}

# Create a stacked bar chart
plt.figure(figsize=(12, 6))
bottom = None
for attack_type, color in colors.items():
    plt.bar(attack_counts.index, attack_counts[attack_type], color=color, label=attack_type, bottom=bottom)
    if bottom is None:
        bottom = attack_counts[attack_type]
    else:
        bottom += attack_counts[attack_type]

plt.title('Stacked Bar Chart of Attacks by Year (Color Coded by Attack Type) - 1991 to 2017')
plt.xlabel('Year')
plt.ylabel('Number of Attacks')
plt.legend(loc='upper left')
plt.xticks(rotation=45)
plt.show()

# Filter the data for attacks in Russia
russia_data = df[df['country_txt'] == 'Russia']

# Extract relevant data
years = russia_data['iyear']
attack_methods = russia_data['attacktype1_txt']

# Create a scatter plot
plt.figure(figsize=(12, 6))

# Color mapping for different attack methods
colors = {
    'Bombing/Explosion': 'red',
    'Armed Assault': 'blue',
    'Assassination': 'green',
    'Hostage Taking (Kidnapping)': 'purple',
    'Facility/Infrastructure Attack': 'orange',
    'Hijacking': 'cyan',
    'Unarmed Assault': 'pink',
    'Hostage Taking (Barricade Incident)': 'yellow',
    'Unknown': 'gray',
}

# Assign colors to each data point based on attack method
scatter_colors = [colors.get(attack_method, 'gray') for attack_method in attack_methods]

# Create the scatter plot
plt.scatter(years, range(len(years)), c=scatter_colors, marker='o', s=10)

# Set labels and title
plt.xlabel('Year')
plt.ylabel('Attack Index')
plt.title('Scatter Plot of Attacks in Russia by Year (Color Coded by Attack Method)')

# Create a legend for attack methods
legend_handles = [plt.Line2D([0], [0], marker='o', color='w', label=method,
                             markersize=10, markerfacecolor=color) for method, color in colors.items()]
legend_handles.append(plt.Line2D([0], [0], marker='o', color='w', label='Other (Unknown)', markersize=10, markerfacecolor='gray'))
plt.legend(handles=legend_handles)

plt.show()

# Filter the data for attacks in Russia
russia_data = df[df['country_txt'] == 'Russia']

# Extract relevant data
years = russia_data['iyear']
attack_groups = russia_data['gname']

# Create a scatter plot
plt.figure(figsize=(12, 6))

# Color mapping for different attack groups
# Note that you can customize the colors as needed
colors = {
    'Group1': 'red',
    'Group2': 'blue',
    'Group3': 'green',
    'Group4': 'purple',
    'Group5': 'orange',
    'Group6': 'cyan',
    'Group7': 'pink',
    'Unknown': 'gray',
}

# Assign colors to each data point based on the attack group
scatter_colors = [colors.get(group, 'gray') for group in attack_groups]

# Create the scatter plot
plt.scatter(years, range(len(years)), c=scatter_colors, marker='o', s=10)

# Set labels and title
plt.xlabel('Year')
plt.ylabel('Attack Index')
plt.title('Scatter Plot of Attacks in Russia by Year (Color Coded by Attack Group)')

# Create a legend for attack groups
legend_handles = [plt.Line2D([0], [0], marker='o', color='w', label=group,
                             markersize=10, markerfacecolor=color) for group, color in colors.items()]
legend_handles.append(plt.Line2D([0], [0], marker='o', color='w', label='Other (Unknown)', markersize=10, markerfacecolor='gray'))
plt.legend(handles=legend_handles)

plt.show()

# Replace 'YourCountry' with the name of the country you want to analyze (e.g., 'Iraq')
country_name = 'Russia'

# Filter the data for attacks in the specified country
country_data = df[df['country_txt'] == country_name]

# Group the data by year and count the frequency of attacks for each year
yearly_counts = country_data['iyear'].value_counts().sort_index()

# Create a line chart
plt.figure(figsize=(12, 6))
plt.plot(yearly_counts.index, yearly_counts.values, marker='o', linestyle='-')
plt.title(f'Terrorist Attacks in {country_name} (All Years)')
plt.xlabel('Year')
plt.ylabel('Number of Attacks')
plt.grid(True)
plt.show()

# Extract the month from the 'imonth' column
df['imonth'] = df['imonth'].apply(lambda x: int(x))

# Count the number of attacks for each month (from 1 to 12)
monthly_counts = df['imonth'].value_counts().sort_index()

# Create a frequency chart
plt.figure(figsize=(10, 6))
plt.bar(monthly_counts.index, monthly_counts.values, color='skyblue')
plt.title('Frequency of Terrorist Attacks by Month')
plt.xlabel('Month')
plt.ylabel('Number of Attacks')
plt.xticks(range(1, 13))
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()